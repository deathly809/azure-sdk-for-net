// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Fabric.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ScaleUnitsOperations.
    /// </summary>
    public static partial class ScaleUnitsOperationsExtensions
    {
            /// <summary>
            /// Scale out a scale unit.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnit'>
            /// Name of the scale units.
            /// </param>
            /// <param name='nodeList'>
            /// A list of input data that allows for adding a set of scale unit nodes.
            /// </param>
            public static OperationStatus ScaleOut(this IScaleUnitsOperations operations, string location, string scaleUnit, ScaleOutScaleUnitParametersList nodeList)
            {
                return operations.ScaleOutAsync(location, scaleUnit, nodeList).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Scale out a scale unit.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnit'>
            /// Name of the scale units.
            /// </param>
            /// <param name='nodeList'>
            /// A list of input data that allows for adding a set of scale unit nodes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> ScaleOutAsync(this IScaleUnitsOperations operations, string location, string scaleUnit, ScaleOutScaleUnitParametersList nodeList, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ScaleOutWithHttpMessagesAsync(location, scaleUnit, nodeList, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a scale unit.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnit'>
            /// Name of the scale units.
            /// </param>
            public static ScaleUnit Get(this IScaleUnitsOperations operations, string location, string scaleUnit)
            {
                return operations.GetAsync(location, scaleUnit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a scale unit.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnit'>
            /// Name of the scale units.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ScaleUnit> GetAsync(this IScaleUnitsOperations operations, string location, string scaleUnit, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(location, scaleUnit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of all scale units at a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<ScaleUnit> List(this IScaleUnitsOperations operations, string location, ODataQuery<ScaleUnit> odataQuery = default(ODataQuery<ScaleUnit>))
            {
                return operations.ListAsync(location, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of all scale units at a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ScaleUnit>> ListAsync(this IScaleUnitsOperations operations, string location, ODataQuery<ScaleUnit> odataQuery = default(ODataQuery<ScaleUnit>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(location, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Scale out a scale unit.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnit'>
            /// Name of the scale units.
            /// </param>
            /// <param name='nodeList'>
            /// A list of input data that allows for adding a set of scale unit nodes.
            /// </param>
            public static OperationStatus BeginScaleOut(this IScaleUnitsOperations operations, string location, string scaleUnit, ScaleOutScaleUnitParametersList nodeList)
            {
                return operations.BeginScaleOutAsync(location, scaleUnit, nodeList).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Scale out a scale unit.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='scaleUnit'>
            /// Name of the scale units.
            /// </param>
            /// <param name='nodeList'>
            /// A list of input data that allows for adding a set of scale unit nodes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> BeginScaleOutAsync(this IScaleUnitsOperations operations, string location, string scaleUnit, ScaleOutScaleUnitParametersList nodeList, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginScaleOutWithHttpMessagesAsync(location, scaleUnit, nodeList, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of all scale units at a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ScaleUnit> ListNext(this IScaleUnitsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of all scale units at a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ScaleUnit>> ListNextAsync(this IScaleUnitsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
