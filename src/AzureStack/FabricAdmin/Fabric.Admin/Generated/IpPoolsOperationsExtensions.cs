// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Fabric.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for IpPoolsOperations.
    /// </summary>
    public static partial class IpPoolsOperationsExtensions
    {
            /// <summary>
            /// Return the requested Ip pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='ipPool'>
            /// Ip pool name.
            /// </param>
            public static IpPool Get(this IIpPoolsOperations operations, string resourceGroupName, string location, string ipPool)
            {
                return operations.GetAsync(resourceGroupName, location, ipPool).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return the requested Ip pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='ipPool'>
            /// Ip pool name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IpPool> GetAsync(this IIpPoolsOperations operations, string resourceGroupName, string location, string ipPool, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, location, ipPool, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create an Ip pool.  Once created an Ip pool cannot be deleted.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='ipPool'>
            /// Ip pool name.
            /// </param>
            /// <param name='pool'>
            /// Ip pool object to send.
            /// </param>
            public static ProvisioningState CreateOrUpdate(this IIpPoolsOperations operations, string resourceGroupName, string location, string ipPool, IpPool pool)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, location, ipPool, pool).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create an Ip pool.  Once created an Ip pool cannot be deleted.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='ipPool'>
            /// Ip pool name.
            /// </param>
            /// <param name='pool'>
            /// Ip pool object to send.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProvisioningState> CreateOrUpdateAsync(this IIpPoolsOperations operations, string resourceGroupName, string location, string ipPool, IpPool pool, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, location, ipPool, pool, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of all ip pools at a certain location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<IpPool> List(this IIpPoolsOperations operations, string resourceGroupName, string location, ODataQuery<IpPool> odataQuery = default(ODataQuery<IpPool>))
            {
                return operations.ListAsync(resourceGroupName, location, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of all ip pools at a certain location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IpPool>> ListAsync(this IIpPoolsOperations operations, string resourceGroupName, string location, ODataQuery<IpPool> odataQuery = default(ODataQuery<IpPool>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, location, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create an Ip pool.  Once created an Ip pool cannot be deleted.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='ipPool'>
            /// Ip pool name.
            /// </param>
            /// <param name='pool'>
            /// Ip pool object to send.
            /// </param>
            public static ProvisioningState BeginCreateOrUpdate(this IIpPoolsOperations operations, string resourceGroupName, string location, string ipPool, IpPool pool)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, location, ipPool, pool).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create an Ip pool.  Once created an Ip pool cannot be deleted.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='ipPool'>
            /// Ip pool name.
            /// </param>
            /// <param name='pool'>
            /// Ip pool object to send.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProvisioningState> BeginCreateOrUpdateAsync(this IIpPoolsOperations operations, string resourceGroupName, string location, string ipPool, IpPool pool, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, location, ipPool, pool, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of all ip pools at a certain location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<IpPool> ListNext(this IIpPoolsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of all ip pools at a certain location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IpPool>> ListNextAsync(this IIpPoolsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
