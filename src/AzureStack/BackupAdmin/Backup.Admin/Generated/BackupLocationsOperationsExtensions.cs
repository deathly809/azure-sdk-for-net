// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Backup.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BackupLocationsOperations.
    /// </summary>
    public static partial class BackupLocationsOperationsExtensions
    {
            /// <summary>
            /// Get the list of backup locations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            public static IEnumerable<BackupLocation> List(this IBackupLocationsOperations operations, string resourceGroup)
            {
                return operations.ListAsync(resourceGroup).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of backup locations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<BackupLocation>> ListAsync(this IBackupLocationsOperations operations, string resourceGroup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new backup location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='backup'>
            /// Backup location object.
            /// </param>
            public static BackupLocation Update(this IBackupLocationsOperations operations, string resourceGroup, ExternalStore backup)
            {
                return operations.UpdateAsync(resourceGroup, backup).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new backup location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='backup'>
            /// Backup location object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupLocation> UpdateAsync(this IBackupLocationsOperations operations, string resourceGroup, ExternalStore backup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroup, backup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific backup location based on name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='backupLocation'>
            /// Name of the backup location.
            /// </param>
            public static BackupLocation Get(this IBackupLocationsOperations operations, string resourceGroup, string backupLocation)
            {
                return operations.GetAsync(resourceGroup, backupLocation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific backup location based on name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='backupLocation'>
            /// Name of the backup location.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupLocation> GetAsync(this IBackupLocationsOperations operations, string resourceGroup, string backupLocation, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroup, backupLocation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Backup a specific location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='backupLocation'>
            /// Name of the backup location.
            /// </param>
            public static string CreateBackup(this IBackupLocationsOperations operations, string resourceGroup, string backupLocation)
            {
                return operations.CreateBackupAsync(resourceGroup, backupLocation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Backup a specific location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='backupLocation'>
            /// Name of the backup location.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> CreateBackupAsync(this IBackupLocationsOperations operations, string resourceGroup, string backupLocation, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateBackupWithHttpMessagesAsync(resourceGroup, backupLocation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Backup a specific location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='backupLocation'>
            /// Name of the backup location.
            /// </param>
            public static string BeginCreateBackup(this IBackupLocationsOperations operations, string resourceGroup, string backupLocation)
            {
                return operations.BeginCreateBackupAsync(resourceGroup, backupLocation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Backup a specific location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='backupLocation'>
            /// Name of the backup location.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> BeginCreateBackupAsync(this IBackupLocationsOperations operations, string resourceGroup, string backupLocation, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateBackupWithHttpMessagesAsync(resourceGroup, backupLocation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
