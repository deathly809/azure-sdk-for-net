// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Backup.Admin.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Information about an external storage location.
    /// </summary>
    public partial class ExternalStore
    {
        /// <summary>
        /// Initializes a new instance of the ExternalStore class.
        /// </summary>
        public ExternalStore()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExternalStore class.
        /// </summary>
        /// <param name="path">Path to the update location</param>
        /// <param name="userName">Username to access the location.</param>
        /// <param name="password">Password to access the location.</param>
        /// <param name="encryptionKeyBase64">Encryption key.</param>
        /// <param name="backupFrequencyInMinutes">How often a backup is
        /// performed.</param>
        /// <param name="availableCapacity">Free space in location.</param>
        /// <param name="isBackupSchedulerEnabled">True if the backup scheduler
        /// is enabled.</param>
        /// <param name="nextBackupTime">The scheduled time of the next
        /// backup.</param>
        /// <param name="lastBackupTime">Time of backup.</param>
        public ExternalStore(string path = default(string), string userName = default(string), string password = default(string), string encryptionKeyBase64 = default(string), string backupFrequencyInMinutes = default(string), string availableCapacity = default(string), bool? isBackupSchedulerEnabled = default(bool?), string nextBackupTime = default(string), string lastBackupTime = default(string))
        {
            Path = path;
            UserName = userName;
            Password = password;
            EncryptionKeyBase64 = encryptionKeyBase64;
            BackupFrequencyInMinutes = backupFrequencyInMinutes;
            AvailableCapacity = availableCapacity;
            IsBackupSchedulerEnabled = isBackupSchedulerEnabled;
            NextBackupTime = nextBackupTime;
            LastBackupTime = lastBackupTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets path to the update location
        /// </summary>
        [JsonProperty(PropertyName = "path")]
        public string Path { get; set; }

        /// <summary>
        /// Gets or sets username to access the location.
        /// </summary>
        [JsonProperty(PropertyName = "userName")]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or sets password to access the location.
        /// </summary>
        [JsonProperty(PropertyName = "password")]
        public string Password { get; set; }

        /// <summary>
        /// Gets or sets encryption key.
        /// </summary>
        [JsonProperty(PropertyName = "encryptionKeyBase64")]
        public string EncryptionKeyBase64 { get; set; }

        /// <summary>
        /// Gets or sets how often a backup is performed.
        /// </summary>
        [JsonProperty(PropertyName = "backupFrequencyInMinutes")]
        public string BackupFrequencyInMinutes { get; set; }

        /// <summary>
        /// Gets or sets free space in location.
        /// </summary>
        [JsonProperty(PropertyName = "availableCapacity")]
        public string AvailableCapacity { get; set; }

        /// <summary>
        /// Gets or sets true if the backup scheduler is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "isBackupSchedulerEnabled")]
        public bool? IsBackupSchedulerEnabled { get; set; }

        /// <summary>
        /// Gets or sets the scheduled time of the next backup.
        /// </summary>
        [JsonProperty(PropertyName = "nextBackupTime")]
        public string NextBackupTime { get; set; }

        /// <summary>
        /// Gets or sets time of backup.
        /// </summary>
        [JsonProperty(PropertyName = "lastBackupTime")]
        public string LastBackupTime { get; set; }

    }
}
