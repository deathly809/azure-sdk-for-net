// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Backup.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BackupsOperations.
    /// </summary>
    public static partial class BackupsOperationsExtensions
    {
            /// <summary>
            /// Returns a list of backups from a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='backupLocation'>
            /// Name of the backup location.
            /// </param>
            public static IEnumerable<Backup> List(this IBackupsOperations operations, string resourceGroup, string backupLocation)
            {
                return operations.ListAsync(resourceGroup, backupLocation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of backups from a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='backupLocation'>
            /// Name of the backup location.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<Backup>> ListAsync(this IBackupsOperations operations, string resourceGroup, string backupLocation, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroup, backupLocation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a backup from a location based on name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='backupLocation'>
            /// Name of the backup location.
            /// </param>
            /// <param name='backup'>
            /// Name of the backup.
            /// </param>
            public static Backup Get(this IBackupsOperations operations, string resourceGroup, string backupLocation, string backup)
            {
                return operations.GetAsync(resourceGroup, backupLocation, backup).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a backup from a location based on name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='backupLocation'>
            /// Name of the backup location.
            /// </param>
            /// <param name='backup'>
            /// Name of the backup.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Backup> GetAsync(this IBackupsOperations operations, string resourceGroup, string backupLocation, string backup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroup, backupLocation, backup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restore a backup.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='backupLocation'>
            /// Name of the backup location.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='backup'>
            /// Name of the backup.
            /// </param>
            public static void Restore(this IBackupsOperations operations, string backupLocation, string resourceGroup, string backup)
            {
                operations.RestoreAsync(backupLocation, resourceGroup, backup).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restore a backup.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='backupLocation'>
            /// Name of the backup location.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='backup'>
            /// Name of the backup.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RestoreAsync(this IBackupsOperations operations, string backupLocation, string resourceGroup, string backup, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RestoreWithHttpMessagesAsync(backupLocation, resourceGroup, backup, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Restore a backup.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='backupLocation'>
            /// Name of the backup location.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='backup'>
            /// Name of the backup.
            /// </param>
            public static void BeginRestore(this IBackupsOperations operations, string backupLocation, string resourceGroup, string backup)
            {
                operations.BeginRestoreAsync(backupLocation, resourceGroup, backup).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restore a backup.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='backupLocation'>
            /// Name of the backup location.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='backup'>
            /// Name of the backup.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRestoreAsync(this IBackupsOperations operations, string backupLocation, string resourceGroup, string backup, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginRestoreWithHttpMessagesAsync(backupLocation, resourceGroup, backup, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
