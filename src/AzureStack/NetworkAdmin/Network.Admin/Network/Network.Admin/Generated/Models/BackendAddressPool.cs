// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Network.Admin.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Representation of a backend address pool.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class BackendAddressPool : Resource
    {
        /// <summary>
        /// Initializes a new instance of the BackendAddressPool class.
        /// </summary>
        public BackendAddressPool()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BackendAddressPool class.
        /// </summary>
        /// <param name="id">URI of the resource.</param>
        /// <param name="name">Name of the resource.</param>
        /// <param name="type">Type of resource.</param>
        /// <param name="location">Region Location of resource.</param>
        /// <param name="tags">List of key value pairs.</param>
        /// <param name="metadata">Metadata related to this backend address
        /// pool.</param>
        /// <param name="provisioningState">The provisioning state. Possible
        /// values include: 'Succeeded', 'Updating', 'Deleting',
        /// 'Failed'</param>
        /// <param name="startIpAddress">The start IP address range.</param>
        /// <param name="endIpAddress">The end IP address range.</param>
        /// <param name="numberOfIPAddresses">The number of IP
        /// addresses.</param>
        /// <param name="numberOfIPAddressesAllocated">The number of IP
        /// addresses allocated.</param>
        /// <param name="numberOfIPAddressesInTransition">The number of IP
        /// addresses in transition.</param>
        public BackendAddressPool(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), IDictionary<string, string> metadata = default(IDictionary<string, string>), string provisioningState = default(string), string startIpAddress = default(string), string endIpAddress = default(string), long? numberOfIPAddresses = default(long?), long? numberOfIPAddressesAllocated = default(long?), long? numberOfIPAddressesInTransition = default(long?))
            : base(id, name, type, location, tags)
        {
            Metadata = metadata;
            ProvisioningState = provisioningState;
            StartIpAddress = startIpAddress;
            EndIpAddress = endIpAddress;
            NumberOfIPAddresses = numberOfIPAddresses;
            NumberOfIPAddressesAllocated = numberOfIPAddressesAllocated;
            NumberOfIPAddressesInTransition = numberOfIPAddressesInTransition;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets metadata related to this backend address pool.
        /// </summary>
        [JsonProperty(PropertyName = "properties.metadata")]
        public IDictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or sets the provisioning state. Possible values include:
        /// 'Succeeded', 'Updating', 'Deleting', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets the start IP address range.
        /// </summary>
        [JsonProperty(PropertyName = "properties.startIpAddress")]
        public string StartIpAddress { get; set; }

        /// <summary>
        /// Gets or sets the end IP address range.
        /// </summary>
        [JsonProperty(PropertyName = "properties.endIpAddress")]
        public string EndIpAddress { get; set; }

        /// <summary>
        /// Gets or sets the number of IP addresses.
        /// </summary>
        [JsonProperty(PropertyName = "properties.numberOfIPAddresses")]
        public long? NumberOfIPAddresses { get; set; }

        /// <summary>
        /// Gets or sets the number of IP addresses allocated.
        /// </summary>
        [JsonProperty(PropertyName = "properties.numberOfIPAddressesAllocated")]
        public long? NumberOfIPAddressesAllocated { get; set; }

        /// <summary>
        /// Gets or sets the number of IP addresses in transition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.numberOfIPAddressesInTransition")]
        public long? NumberOfIPAddressesInTransition { get; set; }

    }
}
