// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Network.Admin.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Representation of a virtual network gateway connection sku.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class VirtualNetworkGatewayConnectionSku : Resource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualNetworkGatewayConnectionSku class.
        /// </summary>
        public VirtualNetworkGatewayConnectionSku()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// VirtualNetworkGatewayConnectionSku class.
        /// </summary>
        /// <param name="id">URI of the resource.</param>
        /// <param name="name">Name of the resource.</param>
        /// <param name="type">Type of resource.</param>
        /// <param name="location">Region Location of resource.</param>
        /// <param name="tags">List of key value pairs.</param>
        /// <param name="metadata">Metadata related to this backend address
        /// pool.</param>
        /// <param name="provisioningState">The provisioning state.</param>
        /// <param name="resourceType">The resource type.</param>
        /// <param name="capabilities">The capabilities of the connection
        /// sku.</param>
        public VirtualNetworkGatewayConnectionSku(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), IDictionary<string, string> metadata = default(IDictionary<string, string>), string provisioningState = default(string), string resourceType = default(string), IList<IDictionary<string, string>> capabilities = default(IList<IDictionary<string, string>>), string isDefault = default(string))
            : base(id, name, type, location, tags)
        {
            Metadata = metadata;
            ProvisioningState = provisioningState;
            ResourceType = resourceType;
            Capabilities = capabilities;
            IsDefault = isDefault;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets metadata related to this backend address pool.
        /// </summary>
        [JsonProperty(PropertyName = "properties.metadata")]
        public IDictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or sets the provisioning state.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets the resource type.
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceType")]
        public string ResourceType { get; set; }

        /// <summary>
        /// Gets or sets the capabilities of the connection sku.
        /// </summary>
        [JsonProperty(PropertyName = "properties.capabilities")]
        public IList<IDictionary<string, string>> Capabilities { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.isDefault")]
        public string IsDefault { get; set; }

    }
}
