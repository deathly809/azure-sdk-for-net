// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Compute.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for VMExtensionsOperations.
    /// </summary>
    public static partial class VMExtensionsOperationsExtensions
    {
            /// <summary>
            /// Get a platform images.
            /// </summary>
            /// <remarks>
            /// Get a platform image by name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationName'>
            /// Location of the resource.
            /// </param>
            /// <param name='publisher'>
            /// Name of the publisher.
            /// </param>
            /// <param name='type'>
            /// Type of the extension.
            /// </param>
            /// <param name='version'>
            /// The version of the resource.
            /// </param>
            public static VMExtension Get(this IVMExtensionsOperations operations, string locationName, string publisher, string type, string version)
            {
                return operations.GetAsync(locationName, publisher, type, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a platform images.
            /// </summary>
            /// <remarks>
            /// Get a platform image by name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationName'>
            /// Location of the resource.
            /// </param>
            /// <param name='publisher'>
            /// Name of the publisher.
            /// </param>
            /// <param name='type'>
            /// Type of the extension.
            /// </param>
            /// <param name='version'>
            /// The version of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VMExtension> GetAsync(this IVMExtensionsOperations operations, string locationName, string publisher, string type, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(locationName, publisher, type, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a platform images.
            /// </summary>
            /// <remarks>
            /// Create a new platform image.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationName'>
            /// Location of the resource.
            /// </param>
            /// <param name='publisher'>
            /// Name of the publisher.
            /// </param>
            /// <param name='type'>
            /// Type of the extension.
            /// </param>
            /// <param name='version'>
            /// The version of the resource.
            /// </param>
            /// <param name='extension'>
            /// Model of an extension.
            /// </param>
            public static VMExtension Create(this IVMExtensionsOperations operations, string locationName, string publisher, string type, string version, VMExtension extension)
            {
                return operations.CreateAsync(locationName, publisher, type, version, extension).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a platform images.
            /// </summary>
            /// <remarks>
            /// Create a new platform image.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationName'>
            /// Location of the resource.
            /// </param>
            /// <param name='publisher'>
            /// Name of the publisher.
            /// </param>
            /// <param name='type'>
            /// Type of the extension.
            /// </param>
            /// <param name='version'>
            /// The version of the resource.
            /// </param>
            /// <param name='extension'>
            /// Model of an extension.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VMExtension> CreateAsync(this IVMExtensionsOperations operations, string locationName, string publisher, string type, string version, VMExtension extension, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(locationName, publisher, type, version, extension, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a platform images.
            /// </summary>
            /// <remarks>
            /// Delete a platform image by name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationName'>
            /// Location of the resource.
            /// </param>
            /// <param name='publisher'>
            /// Name of the publisher.
            /// </param>
            /// <param name='type'>
            /// Type of the extension.
            /// </param>
            /// <param name='version'>
            /// The version of the resource.
            /// </param>
            public static void Delete(this IVMExtensionsOperations operations, string locationName, string publisher, string type, string version)
            {
                operations.DeleteAsync(locationName, publisher, type, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a platform images.
            /// </summary>
            /// <remarks>
            /// Delete a platform image by name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationName'>
            /// Location of the resource.
            /// </param>
            /// <param name='publisher'>
            /// Name of the publisher.
            /// </param>
            /// <param name='type'>
            /// Type of the extension.
            /// </param>
            /// <param name='version'>
            /// The version of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IVMExtensionsOperations operations, string locationName, string publisher, string type, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(locationName, publisher, type, version, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a list of platform images.
            /// </summary>
            /// <remarks>
            /// Get a list of all platform images.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationName'>
            /// Location of the resource.
            /// </param>
            public static IList<VMExtension> List(this IVMExtensionsOperations operations, string locationName)
            {
                return operations.ListAsync(locationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of platform images.
            /// </summary>
            /// <remarks>
            /// Get a list of all platform images.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationName'>
            /// Location of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<VMExtension>> ListAsync(this IVMExtensionsOperations operations, string locationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(locationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
