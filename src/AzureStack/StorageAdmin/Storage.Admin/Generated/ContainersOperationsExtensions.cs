// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Storage.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ContainersOperations.
    /// </summary>
    public static partial class ContainersOperationsExtensions
    {
            /// <summary>
            /// Cancel container migration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// The name of the farm.
            /// </param>
            /// <param name='operationId'>
            /// Operation identifier.
            /// </param>
            public static void CancelMigration(this IContainersOperations operations, string resourceGroupName, string farmId, string operationId)
            {
                operations.CancelMigrationAsync(resourceGroupName, farmId, operationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel container migration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// The name of the farm.
            /// </param>
            /// <param name='operationId'>
            /// Operation identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelMigrationAsync(this IContainersOperations operations, string resourceGroupName, string farmId, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CancelMigrationWithHttpMessagesAsync(resourceGroupName, farmId, operationId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Sets the status of the share to migrate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// The name of the farm.
            /// </param>
            /// <param name='operationId'>
            /// Operation identifier.
            /// </param>
            public static MigrationResult MigrateShare(this IContainersOperations operations, string resourceGroupName, string farmId, string operationId)
            {
                return operations.MigrateShareAsync(resourceGroupName, farmId, operationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the status of the share to migrate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// The name of the farm.
            /// </param>
            /// <param name='operationId'>
            /// Operation identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MigrationResult> MigrateShareAsync(this IContainersOperations operations, string resourceGroupName, string farmId, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MigrateShareWithHttpMessagesAsync(resourceGroupName, farmId, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all containers under the given parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// The name of the farm.
            /// </param>
            /// <param name='shareName'>
            /// TODO
            /// </param>
            /// <param name='intent'>
            /// The container migration intent.
            /// </param>
            /// <param name='maxCount'>
            /// TODO
            /// </param>
            /// <param name='startIndex'>
            /// TODO
            /// </param>
            public static IList<Container> List(this IContainersOperations operations, string resourceGroupName, string farmId, string shareName, string intent, int maxCount, int startIndex)
            {
                return operations.ListAsync(resourceGroupName, farmId, shareName, intent, maxCount, startIndex).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all containers under the given parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// The name of the farm.
            /// </param>
            /// <param name='shareName'>
            /// TODO
            /// </param>
            /// <param name='intent'>
            /// The container migration intent.
            /// </param>
            /// <param name='maxCount'>
            /// TODO
            /// </param>
            /// <param name='startIndex'>
            /// TODO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Container>> ListAsync(this IContainersOperations operations, string resourceGroupName, string farmId, string shareName, string intent, int maxCount, int startIndex, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, farmId, shareName, intent, maxCount, startIndex, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all destination shares under the given parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// The name of the farm.
            /// </param>
            /// <param name='shareName'>
            /// TODO
            /// </param>
            public static IList<Share> ListDestinationShares(this IContainersOperations operations, string resourceGroupName, string farmId, string shareName)
            {
                return operations.ListDestinationSharesAsync(resourceGroupName, farmId, shareName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all destination shares under the given parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// The name of the farm.
            /// </param>
            /// <param name='shareName'>
            /// TODO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Share>> ListDestinationSharesAsync(this IContainersOperations operations, string resourceGroupName, string farmId, string shareName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDestinationSharesWithHttpMessagesAsync(resourceGroupName, farmId, shareName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Migrate a container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// The name of the farm.
            /// </param>
            /// <param name='shareName'>
            /// TODO
            /// </param>
            /// <param name='intent'>
            /// The container migration intent.
            /// </param>
            /// <param name='maxCount'>
            /// TODO
            /// </param>
            /// <param name='startIndex'>
            /// TODO
            /// </param>
            /// <param name='migrationParameters'>
            /// Parameters needed to perform migration
            /// </param>
            public static string Migrate(this IContainersOperations operations, string resourceGroupName, string farmId, string shareName, string intent, int maxCount, int startIndex, MigrationParameters migrationParameters)
            {
                return operations.MigrateAsync(resourceGroupName, farmId, shareName, intent, maxCount, startIndex, migrationParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Migrate a container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// The name of the farm.
            /// </param>
            /// <param name='shareName'>
            /// TODO
            /// </param>
            /// <param name='intent'>
            /// The container migration intent.
            /// </param>
            /// <param name='maxCount'>
            /// TODO
            /// </param>
            /// <param name='startIndex'>
            /// TODO
            /// </param>
            /// <param name='migrationParameters'>
            /// Parameters needed to perform migration
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> MigrateAsync(this IContainersOperations operations, string resourceGroupName, string farmId, string shareName, string intent, int maxCount, int startIndex, MigrationParameters migrationParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MigrateWithHttpMessagesAsync(resourceGroupName, farmId, shareName, intent, maxCount, startIndex, migrationParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel container migration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// The name of the farm.
            /// </param>
            /// <param name='operationId'>
            /// Operation identifier.
            /// </param>
            public static void BeginCancelMigration(this IContainersOperations operations, string resourceGroupName, string farmId, string operationId)
            {
                operations.BeginCancelMigrationAsync(resourceGroupName, farmId, operationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel container migration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// The name of the farm.
            /// </param>
            /// <param name='operationId'>
            /// Operation identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginCancelMigrationAsync(this IContainersOperations operations, string resourceGroupName, string farmId, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginCancelMigrationWithHttpMessagesAsync(resourceGroupName, farmId, operationId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Migrate a container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// The name of the farm.
            /// </param>
            /// <param name='shareName'>
            /// TODO
            /// </param>
            /// <param name='intent'>
            /// The container migration intent.
            /// </param>
            /// <param name='maxCount'>
            /// TODO
            /// </param>
            /// <param name='startIndex'>
            /// TODO
            /// </param>
            /// <param name='migrationParameters'>
            /// Parameters needed to perform migration
            /// </param>
            public static string BeginMigrate(this IContainersOperations operations, string resourceGroupName, string farmId, string shareName, string intent, int maxCount, int startIndex, MigrationParameters migrationParameters)
            {
                return operations.BeginMigrateAsync(resourceGroupName, farmId, shareName, intent, maxCount, startIndex, migrationParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Migrate a container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='farmId'>
            /// The name of the farm.
            /// </param>
            /// <param name='shareName'>
            /// TODO
            /// </param>
            /// <param name='intent'>
            /// The container migration intent.
            /// </param>
            /// <param name='maxCount'>
            /// TODO
            /// </param>
            /// <param name='startIndex'>
            /// TODO
            /// </param>
            /// <param name='migrationParameters'>
            /// Parameters needed to perform migration
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> BeginMigrateAsync(this IContainersOperations operations, string resourceGroupName, string farmId, string shareName, string intent, int maxCount, int startIndex, MigrationParameters migrationParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginMigrateWithHttpMessagesAsync(resourceGroupName, farmId, shareName, intent, maxCount, startIndex, migrationParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all destination shares under the given parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IList<Share> ListDestinationSharesNext(this IContainersOperations operations, string nextPageLink)
            {
                return operations.ListDestinationSharesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all destination shares under the given parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Share>> ListDestinationSharesNextAsync(this IContainersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDestinationSharesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
