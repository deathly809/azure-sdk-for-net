"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const linq_es2015_1 = require("linq-es2015");
const utility_1 = require("./utility");
const request = require("request");
const console_1 = require("./console");
const util_1 = require("util");
class Asset {
}
exports.Asset = Asset;
class Author {
}
exports.Author = Author;
class Release {
}
exports.Release = Release;
let hosts = [
    "https://api.github.com/repos/$FEED/autorest",
    "https://autorest-feed.azureedge.net",
];
function RestCall(url, i, feed, resolve, reject) {
    let stream = request.get(`${hosts[i].replace("$FEED", feed)}${url}`, {
        strictSSL: true,
        timeout: 15000,
        headers: {
            'user-agent': 'autorest-installer',
            "Authorization": `token ${utility_1.Utility.Id}`
        }
    });
    let responseString = '';
    stream.on('data', (data => {
        responseString += data;
    }));
    stream.on('end', () => {
        resolve(JSON.parse(responseString));
    });
    stream.on('error', (err) => {
        console_1.Console.Error(`Failed to access data at ${url}.`);
        if (i < hosts.length - 1) {
            console_1.Console.Error(`Retrying alternate url.`);
            return RestCall(url, i + 1, feed, resolve, reject);
        }
        console_1.Console.Error(`${err}`);
        reject(err);
    });
}
function Rest(url, feed, i = 0) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            RestCall(url, i, feed, resolve, reject);
        });
    });
}
class Github {
    static GetAssets(tag, feed = "azure") {
        return __awaiter(this, void 0, void 0, function* () {
            var response = yield Rest(`/releases/tags/${tag}`, feed);
            console_1.Console.Debug(util_1.inspect(response));
            return linq_es2015_1.From(response.assets);
        });
    }
    static List(feed = "azure") {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield Rest(`/releases`, feed);
            console_1.Console.Debug(util_1.inspect(response));
            return linq_es2015_1.From(response);
        });
    }
}
exports.Github = Github;
//# sourceMappingURL=github.js.map