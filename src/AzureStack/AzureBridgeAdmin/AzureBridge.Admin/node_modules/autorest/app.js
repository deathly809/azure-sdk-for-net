#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("./lib/polyfill.min.js");
const github_1 = require("./github");
const linq_es2015_1 = require("linq-es2015");
const installer_1 = require("./installer");
const semver = require("semver");
const yargs_1 = require("yargs");
const path_1 = require("path");
const dns = require("dns");
const npmjs_1 = require("./npmjs");
const shelljs_1 = require("shelljs");
const chalk = require("chalk");
const console_1 = require("./console");
const fs = require("fs");
class App {
    static get BuildInfo() {
        return `> __Build Information__
> Autorest Bootstrapper :  __${this.pkgVersion}__
> NetCore framework :      __${this.frameworkVersion || '<none>'}__
> Latest Core Installed :  __${this.currentVersion || '<none>'}__
> Requested Core Version : __${this.version || '<none>'}__`;
    }
    static GetReleases() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield github_1.Github.List(App.feed)).Where(each => semver.valid(each.name, false) != null);
        });
    }
    static CheckBootstrapperVersion() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.networkEnabled) {
                return npmjs_1.Npm.LatestRelease().then(npmversion => {
                    if (npmversion == null) {
                        return;
                    }
                    if (semver.gt(npmversion, this.pkgVersion)) {
                        console_1.Console.Log(chalk.yellow.bold(`\nThere is a new version of AutoRest available (${npmversion}).\nInstall with 'npm install autorest -g '.\n`));
                    }
                });
            }
        });
    }
    static ShowHelp() {
        console_1.Console.Log(`${this.BuildInfo}

## __Output Verbosity__
  *--verbose*            show verbose output information
  *--debug*              show internal debug information
  *--quiet*              suppress output

## __Versions__
  *--list-installed*     show all installed versions of AutoRest tools
  *--list-available=__nn__*  lists the last nn releases available from github
                        (defaults to 10)

## __Installation__
  *--version=*__version__    uses __version__ of AutoRest, installing if necessary.
                        for __version__ you can  
                        use a version label (see *--list-available*) or
                          __latest__         - get latest nightly build
                          __latest-release__ - get latest release version
  *--reset*              remove all installed versions of AutoRest tools
                        and install the latest (override with *--version*)
  *--runtime-id*=__id__      overrides the platform detection for the dotnet runtime.

  SEE ALSO : https://aka.ms/autorest/cli for additional documentation
`);
    }
    static ListAvailable() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.networkEnabled) {
                const releases = (yield this.GetReleases()).Take(this.listAvailable);
                let text = `## Last __${this.listAvailable}__ releases available online:`;
                for (let each of releases) {
                    text += `\n> ${each.name}`;
                }
                console_1.Console.Log(text);
            }
            else {
                console_1.Console.Exit('**Unable to check online, network is not available**');
            }
        });
    }
    static ListInstalled() {
        return __awaiter(this, void 0, void 0, function* () {
            if (installer_1.Installer.LatestAutorestVersion) {
                let text = `## Installed versions of AutoRest :`;
                for (let each of yield installer_1.Installer.InstalledAutorestVersions) {
                    text += `\n> ${each}`;
                }
                console_1.Console.Log(text);
            }
            else {
                console_1.Console.Log('**No AutoRest versions are installed**');
            }
        });
    }
    static main(networkEnabled) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.networkEnabled = networkEnabled;
                console_1.Console.Debug(`Network Enabled: ${this.networkEnabled}`);
                const RemoveArgs = linq_es2015_1.From(["--version", "--list-installed", "--list-available", "--reset", "--latest", "--latest-release", "--runtime-id"]);
                // Remove bootstrapper args from cmdline
                process.argv = linq_es2015_1.From(process.argv).Where(each => !RemoveArgs.Any(i => each === i || each.startsWith(`${i}=`) || each.startsWith(`${i}:`))).ToArray();
                // use this to make the core aware that this run may be legal even without any inputs
                // this is a valid scenario for "preparation calls" to autorest like `autorest --reset` or `autorest --latest`
                const allowNoInput = () => {
                    // if there is *any* other argument left, that's an indicator that the core is supposed to do something
                    if (process.argv.length <= 2 /*expecting node and this script*/) {
                        process.argv.push("--allow-no-input");
                    }
                };
                if (this.reset) {
                    shelljs_1.rm('-rf', installer_1.Installer.RootFolder);
                    allowNoInput();
                }
                // check if we're up to date with the bootstrapper
                let waitable = this.CheckBootstrapperVersion();
                // see what we've got installed.
                this.currentVersion = installer_1.Installer.LatestAutorestVersion;
                this.frameworkVersion = installer_1.Installer.LatestFrameworkVersion;
                if (this.version) {
                    console_1.Console.Log(`# AutoRest Code Generator (${this.version})`);
                }
                else {
                    console_1.Console.Log(`# AutoRest Code Generator`);
                }
                console_1.Console.Log(`(c) 2017 Microsoft Corporation. https://aka.ms/autorest \n`);
                // asking for help
                if (this.help) {
                    this.ShowHelp();
                    // remove other arguments and send -help o 
                    process.exit(0);
                }
                if (this.listAvailable || this.listInstalled) {
                    console_1.Console.Log(this.BuildInfo);
                }
                if (this.listAvailable) {
                    yield this.ListAvailable();
                }
                if (this.listInstalled) {
                    yield this.ListInstalled();
                }
                // if the command is not to take action, quit peacefully now.
                if (this.listAvailable || this.listInstalled) {
                    yield waitable;
                    process.exit(0);
                }
                // figure out which version to install/use
                if (this.version == null) {
                    if (this.currentVersion != null) {
                        // take the current one installed
                        this.version = this.currentVersion;
                        console_1.Console.Verbose(`Requested '${this.currentVersion}' version`);
                    }
                    else {
                        // or, grab the latest version
                        this.version = 'latest';
                    }
                }
                else {
                    // a version was explicitly asked for => may just be a preparation call
                    allowNoInput();
                }
                // if necessary, go get the package we need.
                if (this.networkEnabled) {
                    if (this.version.startsWith('latest')) {
                        // find out the latest version
                        let releases = yield this.GetReleases();
                        if (this.version === 'latest-release') {
                            console_1.Console.Verbose('Requested "latest-release" version');
                            releases = releases.Where(each => each.prerelease == false);
                        }
                        else {
                            console_1.Console.Verbose('Requested "latest" available version');
                        }
                        // the desired version is the latest one in the set.
                        const selectedVersion = releases.FirstOrDefault();
                        if (selectedVersion == null) {
                            console_1.Console.Exit(`Unable to find a release matching '${this.version}'.`);
                        }
                        this.version = selectedVersion.name;
                    }
                }
                else {
                    // no network, fall back to the latest installed version
                    if (this.currentVersion == null) {
                        console_1.Console.Exit('No network access, and no currently installed versions of AutoRest.');
                    }
                    this.version = this.currentVersion;
                    console_1.Console.Verbose(`No network access, falling back to version ${this.version}`);
                }
                // check if that is a valid version to use
                if (!semver.valid(this.version, false)) {
                    // it's not.
                    console_1.Console.Exit(`AutoRest Version :'${this.version}' is not a valid version.`);
                }
                yield waitable;
                const installs = new Array();
                // ensure that the framework is Installed
                if (installer_1.Installer.LatestFrameworkVersion == null) {
                    console_1.Console.Verbose(`Dotnet Framework not installed. Attempting to install it.`);
                    installs.push(installer_1.Installer.InstallFramework(App.runtimeId).then(txt => {
                        if (installer_1.Installer.LatestFrameworkVersion == null) {
                            console_1.Console.Exit(`Unable to install dotnet framework (required)`);
                        }
                    }));
                }
                // check if it's installed
                if (!installer_1.Installer.InstalledAutorestVersions.Any(each => each === this.version)) {
                    console_1.Console.Verbose(`AutoRest version '${this.version}' not installed.`);
                    installs.push(this.GetReleases().then(releases => {
                        if (!releases.Any(each => each.name == this.version)) {
                            console_1.Console.Exit(`AutoRest version '${this.version}' is not found in the releases feed.`);
                        }
                        console_1.Console.Verbose(`Attempting to install it.`);
                        // install that version
                        try {
                            return installer_1.Installer.InstallAutoRest(this.version, App.feed);
                        }
                        catch (exception) {
                            console_1.Console.Exit(`Unable to install AutoRest version '${this.version}'`);
                        }
                    }));
                }
                yield Promise.all(installs);
                // call autorest-core in the target folder
                let startPath = path_1.join(installer_1.Installer.AutorestFolder, this.version, 'node_modules', 'autorest-core', 'app.js');
                if (fs.existsSync(startPath)) {
                    require(startPath);
                    return;
                }
                else {
                    startPath = path_1.join(installer_1.Installer.AutorestFolder, this.version, 'node_modules', 'autorest-app', 'app.js');
                    if (fs.existsSync(startPath)) {
                        require(startPath);
                        return;
                    }
                    console_1.Console.Error("Unable to find start path for AutoRest Core Module.");
                }
            }
            catch (exception) {
                console_1.Console.Error(exception);
            }
        });
    }
}
App.listAvailable = yargs_1.argv['list-available'] ? (Number.isInteger(yargs_1.argv['list-available']) ? yargs_1.argv['list-available'] : 10) : 0;
App.listInstalled = yargs_1.argv['list-installed'] ? (Number.isInteger(yargs_1.argv['list-installed']) ? yargs_1.argv['list-installed'] : 10) : 0;
App.runtimeId = yargs_1.argv['runtime-id'];
App.version = yargs_1.argv.version || (yargs_1.argv.latest ? 'latest' : (yargs_1.argv['latest-release'] ? 'latest-release' : null));
App.reset = yargs_1.argv.reset || false;
App.help = yargs_1.argv.help || false;
App.feed = yargs_1.argv.feed || "azure";
App.networkEnabled = true;
App.pkgVersion = require(`${__dirname}/package.json`).version;
App.currentVersion = null;
App.frameworkVersion = null;
// quickly check for network connectivity, and then jump to main.
dns.lookup('8.8.8.8', 4, (err, address, family) => {
    App.main(err == null);
});
//# sourceMappingURL=app.js.map