import { CancellationToken } from "../ref/cancallation";
import { Mappings, SmartPosition } from "../ref/source-map";
import { YAMLNode } from "../ref/yaml";
import { RawSourceMap } from "source-map";
import { BlameTree } from "../source-map/blaming";
import { Lazy } from "../lazy";
import { IFileSystem } from "../file-system";
/********************************************
 * Data model section (not exposed)
 ********************************************/
export interface Metadata {
    inputSourceMap: Lazy<RawSourceMap>;
    sourceMap: Lazy<RawSourceMap>;
    sourceMapEachMappingByLine: Lazy<sourceMap.MappingItem[][]>;
    yamlAst: Lazy<YAMLNode>;
    lineIndices: Lazy<number[]>;
}
export interface Data {
    data: string;
    metadata: Metadata;
}
/********************************************
 * Central data controller
 * - one stop for creating data
 * - ensures WRITE ONCE model
 ********************************************/
export declare abstract class DataStoreViewReadonly {
    abstract Enum(): Promise<string[]>;
    abstract Read(uri: string): Promise<DataHandleRead | null>;
    ReadStrict(uri: string): Promise<DataHandleRead>;
    Dump(targetDirUri: string): Promise<void>;
}
export declare class QuickScope extends DataStoreViewReadonly {
    private handles;
    constructor(handles: DataHandleRead[]);
    Enum(): Promise<string[]>;
    Read(key: string): Promise<DataHandleRead | null>;
}
export declare abstract class DataStoreView extends DataStoreViewReadonly {
    readonly abstract BaseUri: string;
    abstract Write(key: string): Promise<DataHandleWrite>;
    CreateScope(name: string): DataStoreView;
    AsReadonly(): DataStoreViewReadonly;
}
export declare class DataStore extends DataStoreView {
    private cancellationToken;
    static readonly BaseUri: string;
    readonly BaseUri: string;
    private store;
    constructor(cancellationToken?: CancellationToken);
    private ThrowIfCancelled();
    GetReadThroughScope(customUriFilter?: (uri: string) => boolean): DataStoreViewReadonly;
    GetReadThroughScopeFileSystem(fs: IFileSystem): DataStoreViewReadonly;
    /****************
     * Data access
     ***************/
    Write(uri: string): Promise<DataHandleWrite>;
    ReadStrictSync(absoluteUri: string): DataHandleRead;
    Read(uri: string): Promise<DataHandleRead | null>;
    Enum(): Promise<string[]>;
    Blame(absoluteUri: string, position: SmartPosition): BlameTree;
    private CreateInputSourceMapFor(absoluteUri);
}
/********************************************
 * Data handles
 * - provide well-defined access to specific data
 * - provide convenience methods
 ********************************************/
export declare class DataHandleWrite {
    readonly key: string;
    private write;
    Forward: (data: DataHandleRead) => Promise<void>;
    constructor(key: string, write: (rawData: string, metadataFactory: (readHandle: DataHandleRead) => RawSourceMap) => Promise<DataHandleRead>, Forward: (data: DataHandleRead) => Promise<void>);
    WriteDataWithSourceMap(data: string, sourceMapFactory: (readHandle: DataHandleRead) => RawSourceMap): Promise<DataHandleRead>;
    WriteData(data: string, mappings?: Mappings, mappingSources?: DataHandleRead[]): Promise<DataHandleRead>;
    WriteObject<T>(obj: T, mappings?: Mappings, mappingSources?: DataHandleRead[]): Promise<DataHandleRead>;
}
export declare class DataHandleRead {
    readonly key: string;
    private read;
    constructor(key: string, read: Data);
    ReadData(): string;
    ReadMetadata(): Metadata;
    ReadObject<T>(): T;
    ReadYamlAst(): YAMLNode;
    IsObject(): boolean;
    Blame(position: sourceMap.Position): sourceMap.MappedPosition[];
}
