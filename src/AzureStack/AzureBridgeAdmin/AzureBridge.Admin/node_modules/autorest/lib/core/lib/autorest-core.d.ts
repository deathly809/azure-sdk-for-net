import { IEvent, EventEmitter } from "./events";
import { IFileSystem } from "./file-system";
import { ConfigurationView } from "./configuration";
export { ConfigurationView } from "./configuration";
import { Message } from "./message";
import { Artifact } from "./artifact";
export declare class AutoRest extends EventEmitter {
    private fileSystem;
    configFileOrFolderUri: string;
    private _configurations;
    private _view;
    readonly view: Promise<ConfigurationView>;
    RegenerateView(includeDefault?: boolean): Promise<ConfigurationView>;
    /**
     *
     * @param rootUri The rootUri of the workspace. Is null if no workspace is open.
     * @param fileSystem The implementation of the filesystem to load and save files from the host application.
     */
    constructor(fileSystem?: IFileSystem, configFileOrFolderUri?: string);
    /**
     *  Given a file's content, does this represent a swagger file of some sort?
     *
     * @param content - the file content to evaluate
     */
    static IsSwaggerFile(content: string): Promise<boolean>;
    static LiterateToJson(content: string): Promise<string>;
    static IsConfigurationFile(content: string): Promise<boolean>;
    static IsConfigurationExtension(extension: string): boolean;
    static IsSwaggerExtension(extension: string): boolean;
    static DetectConfigurationFile(fileSystem: IFileSystem, documentPath?: string): Promise<string | null>;
    Invalidate(): void;
    AddConfiguration(configuration: any): void;
    ResetConfiguration(): Promise<void>;
    readonly HasConfiguration: Promise<boolean>;
    /**
     * Called to start processing of the files.
     */
    Process(): {
        finish: Promise<boolean | Error>;
        cancel: () => void;
    };
    /**
     * Event: Signals when a Process() finishes.
     */
    Finished: IEvent<AutoRest, boolean | Error>;
    /**
    * Event: Signals when a File is generated
    */
    GeneratedFile: IEvent<AutoRest, Artifact>;
    /**
     * Event: Signals when a message is generated
     */
    Message: IEvent<AutoRest, Message>;
}
