import { EventEmitter, IEvent } from "./events";
import { IFileSystem } from "./file-system";
import { Message } from "./message";
import { Artifact } from "./artifact";
export interface AutoRestConfigurationImpl {
    __info?: string | null;
    "allow-no-input"?: boolean;
    "input-file": string[] | string;
    "base-folder"?: string;
    "directive"?: Directive[] | Directive;
    "output-artifact"?: string[] | string;
    "message-format"?: "json";
    "vscode"?: any;
    "override-info"?: any;
    "title"?: any;
    "description"?: any;
    "debug"?: boolean;
    "verbose"?: boolean;
    "output-file"?: string;
    "output-folder"?: string;
    "client-side-validation"?: boolean;
    "fluent"?: boolean;
    "azure-arm"?: boolean;
    "namespace"?: string;
    "license-header"?: string;
    "add-credentials"?: boolean;
    "package-name"?: string;
    "package-version"?: string;
    "sync-methods"?: "all" | "essential" | "none";
    "payload-flattening-threshold"?: number;
    "openapi-type"?: string;
}
export interface Directive {
    from?: string[] | string;
    where?: string[] | string;
    reason?: string;
    suppress?: string[] | string;
    set?: string[] | string;
    transform?: string[] | string;
    test?: string[] | string;
}
export declare class DirectiveView {
    private directive;
    constructor(directive: Directive);
    readonly from: Iterable<string>;
    readonly where: Iterable<string>;
    readonly reason: string | null;
    readonly suppress: Iterable<string>;
    readonly set: Iterable<string>;
    readonly transform: Iterable<string>;
    readonly test: Iterable<string>;
}
export declare class MessageEmitter extends EventEmitter {
    /**
    * Event: Signals when a File is generated
    */
    GeneratedFile: IEvent<MessageEmitter, Artifact>;
    /**
     * Event: Signals when a message is generated
     */
    Message: IEvent<MessageEmitter, Message>;
    private cancellationTokenSource;
    constructor();
}
export declare class ConfigurationView {
    messageEmitter: MessageEmitter;
    configFileFolderUri: string;
    [name: string]: any;
    private suppressor;
    readonly Keys: Array<string>;
    Dump(title?: string): void;
    private config;
    private rawConfig;
    private ResolveAsFolder(path);
    private ResolveAsPath(path);
    private readonly BaseFolderUri;
    readonly Directives: Iterable<DirectiveView>;
    readonly InputFileUris: string[];
    readonly OutputFolderUri: string;
    IsOutputArtifactRequested(artifact: string): boolean;
    GetEntry(key: keyof AutoRestConfigurationImpl): any;
    readonly Raw: AutoRestConfigurationImpl;
    readonly DebugMode: boolean;
    readonly VerboseMode: boolean;
    GetNestedConfiguration(pluginName: string): Iterable<ConfigurationView>;
    GetNestedConfigurationImmediate(...scope: any[]): ConfigurationView;
    Message(m: Message): void;
}
export declare class Configuration {
    private fileSystem;
    private configFileOrFolderUri;
    private ParseCodeBlocks(configFile, contextConfig, scope);
    CreateView(messageEmitter: MessageEmitter, includeDefault: boolean, ...configs: Array<any>): Promise<ConfigurationView>;
    constructor(fileSystem?: IFileSystem, configFileOrFolderUri?: string);
    static DetectConfigurationFile(fileSystem: IFileSystem, configFileOrFolderUri: string | null): Promise<string | null>;
}
